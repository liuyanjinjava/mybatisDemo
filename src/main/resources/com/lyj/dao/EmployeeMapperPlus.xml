<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lyj.dao.EmployeeMapperPlus">
    <!--public Employee getEmpById(Integer id);-->
    <!--对于resultMap，不可以和resultType同时存在，不写映射，就是默认映射type类型里的字段
    可以单独写一个列的映射，但是为了方便检查，还是要把其他列都写上，主键单独用id来表示比
    用resultMap来映射要好，因为底层会给id列来做优化-->
    <resultMap id="MyEmp" type="com.lyj.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
    </resultMap>
    <select id="getEmpById"  resultMap="MyEmp" databaseId="mysql">
             select * from tbl_employee where id=#{id}
    </select>
    <!--public Employee getEmpAndDept(Integer id);-->
    <!--第一种情况联合属性，使用级联属性能封装成javaBean对象-->
    <resultMap id="MyEmp_dept" type="com.lyj.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="did" property="department.id"/>
        <result column="deptname" property="department.deptment"/>
    </resultMap>
    <resultMap id="MyEmp_dept1" type="com.lyj.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <!--assocation可以指定联合的javaBean对象,javaType指定联合的java类型-->
        <association property="department" javaType="com.lyj.bean.Department">
            <id column="did" property="id"/>
            <id column="deptname" property="deptment"/>
        </association>

    </resultMap>
    <select id="getEmpAndDept" resultMap="MyEmp_dept1" databaseId="mysql">
    SELECT e.id id,e.last_name,e.gender,e.d_id,d.id did,d.deptname
    from  tbl_employee e,tbl_dept d
    where e.d_id=d.id and e.id=#{id}
    </select>
    <!--public Employee getEmpByIdStep(Integer id);-->
    <!--这里是分步查询的意思懒记载是按需加载的意思，就是说要在需要的时候进行加载；-->
    <!--可以配置懒加载在settings.xml中配置；-->
    <resultMap id="MyEmpStep" type="com.lyj.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email"  property="email"/>
        <association property="department" select="com.lyj.dao.DepartmentMapper.getDeptById"
        column="d_id"/>
    </resultMap>

    <select id="getEmpByIdStep" databaseId="mysql" resultMap="MyEmpDis">
            select * from tbl_employee where id=#{id}
    </select>

    <!--public Employee getEmpByDeptId(Integer deptID);-->
    <!--通过部门Id查员工-->
    <select id="getEmpByDeptId" databaseId="mysql" resultType="com.lyj.bean.Employee">
      select * from tbl_employee where d_id=#{deptId}
    </select>

    <!--<discriminator javaType=""></discriminator>-->
    <!--鉴别器，mybatis可以使用discriminator 判断某列的值，然后根据某列的值来改变封装行为-->
    <!--如果查出的是女生，就把部门信息查询出来，否则，不查询，如果是男生就把last_name
    这一列的值赋值给email-->
    <resultMap id="MyEmpDis" type="com.lyj.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email"  property="email"/>
        <association property="department" select="com.lyj.dao.DepartmentMapper.getDeptById"
                     column="d_id"/>
        <discriminator javaType="String" column="gender">
            <case value="0" resultType="com.lyj.bean.Employee">
                <association property="department" select="com.lyj.dao.DepartmentMapper.getDeptById"
                             column="d_id"/>
            </case>
            <case value="1" resultType="com.lyj.bean.Employee">
                <id column="id" property="id"/>
                <result column="last_name" property="lastName"/>
                <result column="last_name" property="gender"/>
                <result column="email"  property="email"/>
            </case>
        </discriminator>
    </resultMap>

</mapper>